{"version":3,"file":"index.js","sources":["../src/logger.ts","../src/spanWrapper.ts","../src/configuration.ts","../src/transformations.ts","../src/instrumenter.ts","../src/instrumentation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"opentelemetry-instrumentation-azure-sdk\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanAttributeValue, SpanStatusCode } from \"@opentelemetry/api\";\nimport { SpanStatus, TracingSpan } from \"@azure/core-tracing\";\n\nexport class OpenTelemetrySpanWrapper implements TracingSpan {\n  private _span: Span;\n\n  constructor(span: Span) {\n    this._span = span;\n  }\n\n  setStatus(status: SpanStatus): void {\n    if (status.status === \"error\") {\n      if (status.error) {\n        this._span.setStatus({ code: SpanStatusCode.ERROR, message: status.error.toString() });\n        this.recordException(status.error);\n      } else {\n        this._span.setStatus({ code: SpanStatusCode.ERROR });\n      }\n    } else if (status.status === \"success\") {\n      this._span.setStatus({ code: SpanStatusCode.OK });\n    }\n  }\n\n  setAttribute(name: string, value: unknown): void {\n    if (value !== null && value !== undefined) {\n      this._span.setAttribute(name, value as SpanAttributeValue);\n    }\n  }\n\n  end(): void {\n    this._span.end();\n  }\n\n  recordException(exception: string | Error): void {\n    this._span.recordException(exception);\n  }\n\n  isRecording(): boolean {\n    return this._span.isRecording();\n  }\n\n  /**\n   * Allows getting the wrapped span as needed.\n   * @internal\n   *\n   * @returns The underlying span\n   */\n  unwrap(): Span {\n    return this._span;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"1.0.0-beta.3\";\n\n/**\n * @internal\n *\n * Keys of known environment variables we look up.\n */\nexport type KnownEnvironmentKey = \"AZURE_HTTP_TRACING_CHILDREN_DISABLED\" | \"AZURE_TRACING_DISABLED\";\n\n/**\n * @internal\n *\n * Cached values of environment variables that were fetched.\n */\nexport const environmentCache = new Map<KnownEnvironmentKey, string | undefined>();\n\n/**\n * Converts an environment variable to Boolean.\n * the strings \"false\" and \"0\" are treated as falsy values.\n *\n * @internal\n */\nexport function envVarToBoolean(key: KnownEnvironmentKey): boolean {\n  if (!environmentCache.has(key)) {\n    loadEnvironmentVariable(key);\n  }\n  const value = (environmentCache.get(key) ?? \"\").toLowerCase();\n  return value !== \"false\" && value !== \"0\" && Boolean(value);\n}\n\nfunction loadEnvironmentVariable(key: KnownEnvironmentKey): void {\n  if (typeof process !== \"undefined\" && process.env) {\n    const rawValue = process.env[key] ?? process.env[key.toLowerCase()];\n    environmentCache.set(key, rawValue);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { InstrumenterSpanOptions, TracingSpanKind, TracingSpanLink } from \"@azure/core-tracing\";\nimport {\n  Link,\n  SpanAttributeValue,\n  SpanAttributes,\n  SpanKind,\n  SpanOptions,\n  trace,\n} from \"@opentelemetry/api\";\n\n/**\n * Converts our TracingSpanKind to the corresponding OpenTelemetry SpanKind.\n *\n * By default it will return {@link SpanKind.INTERNAL}\n * @param tracingSpanKind - The core tracing {@link TracingSpanKind}\n * @returns - The OpenTelemetry {@link SpanKind}\n */\nexport function toOpenTelemetrySpanKind<K extends TracingSpanKind>(\n  tracingSpanKind?: K\n): SpanKindMapping[K] {\n  const key = (tracingSpanKind || \"internal\").toUpperCase() as keyof typeof SpanKind;\n  return SpanKind[key] as SpanKindMapping[K];\n}\n\n/**\n * A mapping between our {@link TracingSpanKind} union type and OpenTelemetry's {@link SpanKind}.\n */\ntype SpanKindMapping = {\n  client: SpanKind.CLIENT;\n  server: SpanKind.SERVER;\n  producer: SpanKind.PRODUCER;\n  consumer: SpanKind.CONSUMER;\n  internal: SpanKind.INTERNAL;\n};\n\n/**\n * Converts core-tracing's TracingSpanLink to OpenTelemetry's Link\n *\n * @param spanLinks - The core tracing {@link TracingSpanLink} to convert\n * @returns A set of {@link Link}s\n */\nfunction toOpenTelemetryLinks(spanLinks: TracingSpanLink[] = []): Link[] {\n  return spanLinks.reduce((acc, tracingSpanLink) => {\n    const spanContext = trace.getSpanContext(tracingSpanLink.tracingContext);\n    if (spanContext) {\n      acc.push({\n        context: spanContext,\n        attributes: toOpenTelemetrySpanAttributes(tracingSpanLink.attributes),\n      });\n    }\n    return acc;\n  }, [] as Link[]);\n}\n\n/**\n * Converts core-tracing's span attributes to OpenTelemetry attributes.\n *\n * @param spanAttributes - The set of attributes to convert.\n * @returns An {@link SpanAttributes} to set on a span.\n */\nfunction toOpenTelemetrySpanAttributes(\n  spanAttributes: { [key: string]: unknown } | undefined\n): SpanAttributes {\n  const attributes: ReturnType<typeof toOpenTelemetrySpanAttributes> = {};\n  for (const key in spanAttributes) {\n    // Any non-nullish value is allowed.\n    if (spanAttributes[key] !== null && spanAttributes[key] !== undefined) {\n      attributes[key] = spanAttributes[key] as SpanAttributeValue;\n    }\n  }\n  return attributes;\n}\n\n/**\n * Converts core-tracing span options to OpenTelemetry options.\n *\n * @param spanOptions - The {@link InstrumenterSpanOptions} to convert.\n * @returns An OpenTelemetry {@link SpanOptions} that can be used when creating a span.\n */\nexport function toSpanOptions(spanOptions?: InstrumenterSpanOptions): SpanOptions {\n  const { spanAttributes, spanLinks, spanKind } = spanOptions || {};\n\n  const attributes: SpanAttributes = toOpenTelemetrySpanAttributes(spanAttributes);\n  const kind = toOpenTelemetrySpanKind(spanKind);\n  const links = toOpenTelemetryLinks(spanLinks);\n\n  return {\n    attributes,\n    kind,\n    links,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  INVALID_SPAN_CONTEXT,\n  Span,\n  context,\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  trace,\n} from \"@opentelemetry/api\";\nimport {\n  Instrumenter,\n  InstrumenterSpanOptions,\n  TracingContext,\n  TracingSpan,\n} from \"@azure/core-tracing\";\nimport { W3CTraceContextPropagator, suppressTracing } from \"@opentelemetry/core\";\n\nimport { OpenTelemetrySpanWrapper } from \"./spanWrapper\";\nimport { envVarToBoolean } from \"./configuration\";\nimport { toSpanOptions } from \"./transformations\";\n\n// While default propagation is user-configurable, Azure services always use the W3C implementation.\nexport const propagator = new W3CTraceContextPropagator();\n\nexport class OpenTelemetryInstrumenter implements Instrumenter {\n  startSpan(\n    name: string,\n    spanOptions: InstrumenterSpanOptions\n  ): { span: TracingSpan; tracingContext: TracingContext } {\n    let ctx = spanOptions?.tracingContext || context.active();\n    let span: Span;\n\n    if (envVarToBoolean(\"AZURE_TRACING_DISABLED\")) {\n      // disable only our spans but not any downstream spans\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else {\n      // Create our span\n      span = trace\n        .getTracer(spanOptions.packageName, spanOptions.packageVersion)\n        .startSpan(name, toSpanOptions(spanOptions), ctx);\n\n      if (\n        envVarToBoolean(\"AZURE_HTTP_TRACING_CHILDREN_DISABLED\") &&\n        name.toUpperCase().startsWith(\"HTTP\")\n      ) {\n        // disable downstream spans\n        ctx = suppressTracing(ctx);\n      }\n    }\n\n    return {\n      span: new OpenTelemetrySpanWrapper(span),\n      tracingContext: trace.setSpan(ctx, span),\n    };\n  }\n  withContext<\n    CallbackArgs extends unknown[],\n    Callback extends (...args: CallbackArgs) => ReturnType<Callback>\n  >(\n    tracingContext: TracingContext,\n    callback: Callback,\n    ...callbackArgs: CallbackArgs\n  ): ReturnType<Callback> {\n    return context.with(\n      tracingContext,\n      callback,\n      /** Assume caller will bind `this` or use arrow functions */ undefined,\n      ...callbackArgs\n    );\n  }\n\n  parseTraceparentHeader(traceparentHeader: string): TracingContext {\n    return propagator.extract(\n      context.active(),\n      { traceparent: traceparentHeader },\n      defaultTextMapGetter\n    );\n  }\n\n  createRequestHeaders(tracingContext?: TracingContext): Record<string, string> {\n    const headers: Record<string, string> = {};\n    propagator.inject(tracingContext || context.active(), headers, defaultTextMapSetter);\n    return headers;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type * as coreTracing from \"@azure/core-tracing\";\nimport {\n  Instrumentation,\n  InstrumentationBase,\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n  InstrumentationNodeModuleDefinition,\n} from \"@opentelemetry/instrumentation\";\nimport { OpenTelemetryInstrumenter } from \"./instrumenter\";\nimport { SDK_VERSION } from \"./configuration\";\n\n/**\n * Configuration options that can be passed to {@link createAzureSdkInstrumentation} function.\n */\nexport interface AzureSdkInstrumentationOptions extends InstrumentationConfig {}\n\n/**\n * The instrumentation module for the Azure SDK. Implements OpenTelemetry's {@link Instrumentation}.\n */\nclass AzureSdkInstrumentation extends InstrumentationBase {\n  constructor(options: AzureSdkInstrumentationOptions = {}) {\n    super(\n      \"@azure/opentelemetry-instrumentation-azure-sdk\",\n      SDK_VERSION,\n      Object.assign({}, options)\n    );\n  }\n  /**\n   * Entrypoint for the module registration.\n   *\n   * @returns The patched \\@azure/core-tracing module after setting its instrumenter.\n   */\n  protected init():\n    | void\n    | InstrumentationModuleDefinition<typeof coreTracing>\n    | InstrumentationModuleDefinition<typeof coreTracing>[] {\n    const result: InstrumentationModuleDefinition<typeof coreTracing> =\n      new InstrumentationNodeModuleDefinition(\n        \"@azure/core-tracing\",\n        [\"^1.0.0-preview.14\", \"^1.0.0\"],\n        (moduleExports) => {\n          if (typeof moduleExports.useInstrumenter === \"function\") {\n            moduleExports.useInstrumenter(new OpenTelemetryInstrumenter());\n          }\n\n          return moduleExports;\n        }\n      );\n    // Needed to support 1.0.0-preview.14\n    result.includePrerelease = true;\n    return result;\n  }\n}\n\n/**\n * Enables Azure SDK Instrumentation using OpenTelemetry for Azure SDK client libraries.\n *\n * When registered, any Azure data plane package will begin emitting tracing spans for internal calls\n * as well as network calls\n *\n * Example usage:\n * ```ts\n * const openTelemetryInstrumentation = require(\"@opentelemetry/instrumentation\");\n * openTelemetryInstrumentation.registerInstrumentations({\n *   instrumentations: [createAzureSdkInstrumentation()],\n * })\n * ```\n *\n * @remarks\n *\n * As OpenTelemetry instrumentations rely on patching required modules, you should register\n * this instrumentation as early as possible and before loading any Azure Client Libraries.\n */\nexport function createAzureSdkInstrumentation(\n  options: AzureSdkInstrumentationOptions = {}\n): Instrumentation {\n  return new AzureSdkInstrumentation(options);\n}\n"],"names":["createClientLogger","SpanStatusCode","SpanKind","trace","W3CTraceContextPropagator","context","INVALID_SPAN_CONTEXT","suppressTracing","defaultTextMapGetter","defaultTextMapSetter","InstrumentationBase","InstrumentationNodeModuleDefinition"],"mappings":"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"}