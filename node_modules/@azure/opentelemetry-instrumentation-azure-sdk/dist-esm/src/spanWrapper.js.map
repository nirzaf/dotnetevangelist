{"version":3,"file":"spanWrapper.js","sourceRoot":"","sources":["../../src/spanWrapper.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAA4B,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAG9E,MAAM,OAAO,wBAAwB;IAGnC,YAAY,IAAU;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,SAAS,CAAC,MAAkB;QAC1B,IAAI,MAAM,CAAC,MAAM,KAAK,OAAO,EAAE;YAC7B,IAAI,MAAM,CAAC,KAAK,EAAE;gBAChB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBACvF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACpC;iBAAM;gBACL,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;aACtD;SACF;aAAM,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;SACnD;IACH,CAAC;IAED,YAAY,CAAC,IAAY,EAAE,KAAc;QACvC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;YACzC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,KAA2B,CAAC,CAAC;SAC5D;IACH,CAAC;IAED,GAAG;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,eAAe,CAAC,SAAyB;QACvC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanAttributeValue, SpanStatusCode } from \"@opentelemetry/api\";\nimport { SpanStatus, TracingSpan } from \"@azure/core-tracing\";\n\nexport class OpenTelemetrySpanWrapper implements TracingSpan {\n  private _span: Span;\n\n  constructor(span: Span) {\n    this._span = span;\n  }\n\n  setStatus(status: SpanStatus): void {\n    if (status.status === \"error\") {\n      if (status.error) {\n        this._span.setStatus({ code: SpanStatusCode.ERROR, message: status.error.toString() });\n        this.recordException(status.error);\n      } else {\n        this._span.setStatus({ code: SpanStatusCode.ERROR });\n      }\n    } else if (status.status === \"success\") {\n      this._span.setStatus({ code: SpanStatusCode.OK });\n    }\n  }\n\n  setAttribute(name: string, value: unknown): void {\n    if (value !== null && value !== undefined) {\n      this._span.setAttribute(name, value as SpanAttributeValue);\n    }\n  }\n\n  end(): void {\n    this._span.end();\n  }\n\n  recordException(exception: string | Error): void {\n    this._span.recordException(exception);\n  }\n\n  isRecording(): boolean {\n    return this._span.isRecording();\n  }\n\n  /**\n   * Allows getting the wrapped span as needed.\n   * @internal\n   *\n   * @returns The underlying span\n   */\n  unwrap(): Span {\n    return this._span;\n  }\n}\n"]}