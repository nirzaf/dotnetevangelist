{"version":3,"file":"AzureFunctionsHook.js","sourceRoot":"","sources":["../../AutoCollection/AzureFunctionsHook.ts"],"names":[],"mappings":"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","sourcesContent":["import { Disposable, PostInvocationContext, PreInvocationContext } from \"@azure/functions-core\";\r\nimport { Context, HttpRequest, HttpResponse } from \"@azure/functions\";\r\nimport Logging = require(\"../Library/Logging\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport { CorrelationContext, CorrelationContextManager } from \"./CorrelationContextManager\";\r\n\r\n/** Node.js Azure Functions handle incoming HTTP requests before Application Insights SDK is available,\r\n * this code generate incoming request telemetry and generate correlation context to be used\r\n * by outgoing requests and other telemetry, we rely on hooks provided by Azure Functions\r\n*/\r\nexport class AzureFunctionsHook {\r\n    private _client: TelemetryClient;\r\n    private _functionsCoreModule: typeof import(\"@azure/functions-core\");\r\n    private _autoGenerateIncomingRequests: boolean;\r\n    private _preInvocationHook: Disposable;\r\n    private _postInvocationHook: Disposable;\r\n\r\n    constructor(client: TelemetryClient) {\r\n        this._client = client;\r\n        this._autoGenerateIncomingRequests = false;\r\n        try {\r\n            this._functionsCoreModule = require(\"@azure/functions-core\");\r\n            // Only v3 of Azure Functions library is supported right now. See matrix of versions here:\r\n            // https://github.com/Azure/azure-functions-nodejs-library\r\n            const funcProgModel = this._functionsCoreModule.getProgrammingModel();\r\n            if (funcProgModel.name === \"@azure/functions\" && funcProgModel.version.startsWith(\"3.\")) {\r\n                this._addPreInvocationHook();\r\n                this._addPostInvocationHook();\r\n            } else {\r\n                Logging.warn(`AzureFunctionsHook does not support model \"${funcProgModel.name}\" version \"${funcProgModel.version}\"`);\r\n            }\r\n        }\r\n        catch (error) {\r\n            Logging.info(\"AzureFunctionsHook failed to load, not running in Azure Functions\");\r\n        }\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        this._autoGenerateIncomingRequests = isEnabled;\r\n    }\r\n\r\n    public dispose() {\r\n        this.enable(false);\r\n        this._removeInvocationHooks();\r\n        this._functionsCoreModule = undefined;\r\n    }\r\n\r\n    private _addPreInvocationHook() {\r\n        if (!this._preInvocationHook) {\r\n            this._preInvocationHook = this._functionsCoreModule.registerHook(\"preInvocation\", async (preInvocationContext: PreInvocationContext) => {\r\n                const ctx: Context = <Context>preInvocationContext.invocationContext;\r\n                try {\r\n                    // Start an AI Correlation Context using the provided Function context\r\n                    let extractedContext = CorrelationContextManager.startOperation(ctx);\r\n                    if (extractedContext) { // Will be null if CorrelationContextManager is not enabled, we should not try to propagate context in that case\r\n                        extractedContext.customProperties.setProperty(\"InvocationId\", ctx.invocationId);\r\n                        if (ctx.traceContext.attributes) {\r\n                            extractedContext.customProperties.setProperty(\"ProcessId\", ctx.traceContext.attributes[\"ProcessId\"]);\r\n                            extractedContext.customProperties.setProperty(\"LogLevel\", ctx.traceContext.attributes[\"LogLevel\"]);\r\n                            extractedContext.customProperties.setProperty(\"Category\", ctx.traceContext.attributes[\"Category\"]);\r\n                            extractedContext.customProperties.setProperty(\"HostInstanceId\", ctx.traceContext.attributes[\"HostInstanceId\"]);\r\n                            extractedContext.customProperties.setProperty(\"AzFuncLiveLogsSessionId\", ctx.traceContext.attributes[\"#AzFuncLiveLogsSessionId\"]);\r\n                        }\r\n                        preInvocationContext.functionCallback = CorrelationContextManager.wrapCallback(preInvocationContext.functionCallback, extractedContext);\r\n                        if (this._isHttpTrigger(ctx) && this._autoGenerateIncomingRequests) {\r\n                            preInvocationContext.hookData.appInsightsExtractedContext = extractedContext;\r\n                            preInvocationContext.hookData.appInsightsStartTime = Date.now(); // Start trackRequest timer\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    Logging.warn(\"Failed to propagate context in Azure Functions\", err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private _addPostInvocationHook() {\r\n        if (!this._postInvocationHook) {\r\n            this._postInvocationHook = this._functionsCoreModule.registerHook(\"postInvocation\", async (postInvocationContext: PostInvocationContext) => {\r\n                try {\r\n                    if (this._autoGenerateIncomingRequests) {\r\n                        const ctx: Context = <Context>postInvocationContext.invocationContext;\r\n                        if (this._isHttpTrigger(ctx)) {\r\n                            const request: HttpRequest = postInvocationContext.inputs[0];\r\n                            if (request) {\r\n                                const startTime: number = postInvocationContext.hookData.appInsightsStartTime || Date.now();\r\n                                const response = this._getAzureFunctionResponse(postInvocationContext, ctx);\r\n                                const extractedContext: CorrelationContext | undefined = postInvocationContext.hookData.appInsightsExtractedContext;\r\n                                if (!extractedContext) {\r\n                                    this._createIncomingRequestTelemetry(request, response, startTime, null);\r\n                                }\r\n                                else {\r\n                                    CorrelationContextManager.runWithContext(extractedContext, () => {\r\n                                        this._createIncomingRequestTelemetry(request, response, startTime, extractedContext.operation.parentId);\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    Logging.warn(\"Error creating automatic incoming request in Azure Functions\", err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private _createIncomingRequestTelemetry(request: HttpRequest, response: HttpResponse, startTime: number, parentId: string) {\r\n        let statusCode: string | number = 200; //Default\r\n        for (const value of [response.statusCode, response.status]) {\r\n            if (typeof value === \"number\" && Number.isInteger(value)) {\r\n                statusCode = value;\r\n                break;\r\n            } else if (typeof value === \"string\") {\r\n                const parsedVal = parseInt(value);\r\n                if (!isNaN(parsedVal)) {\r\n                    statusCode = parsedVal;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this._client.trackRequest({\r\n            name: request.method + \" \" + request.url,\r\n            resultCode: statusCode,\r\n            success: (0 < statusCode) && (statusCode < 400),\r\n            url: request.url,\r\n            time: new Date(startTime),\r\n            duration: Date.now() - startTime,\r\n            id: parentId\r\n        });\r\n        this._client.flush();\r\n    }\r\n\r\n    private _getAzureFunctionResponse(postInvocationContext: PostInvocationContext, ctx: Context): HttpResponse {\r\n        const httpOutputBinding = ctx.bindingDefinitions.find(b => b.direction === \"out\" && b.type.toLowerCase() === \"http\");\r\n        if (httpOutputBinding?.name === \"$return\") {\r\n            return postInvocationContext.result;\r\n        } else if (httpOutputBinding && ctx.bindings && ctx.bindings[httpOutputBinding.name] !== undefined) {\r\n            return ctx.bindings[httpOutputBinding.name];\r\n        } else {\r\n            return ctx.res;\r\n        }\r\n    }\r\n\r\n    private _isHttpTrigger(ctx: Context) {\r\n        return ctx.bindingDefinitions.find(b => b.type?.toLowerCase() === \"httptrigger\");\r\n    }\r\n\r\n    private _removeInvocationHooks() {\r\n        if (this._preInvocationHook) {\r\n            this._preInvocationHook.dispose();\r\n            this._preInvocationHook = undefined;\r\n        }\r\n        if (this._postInvocationHook) {\r\n            this._postInvocationHook.dispose();\r\n            this._postInvocationHook = undefined;\r\n        }\r\n    }\r\n}\r\n"]}