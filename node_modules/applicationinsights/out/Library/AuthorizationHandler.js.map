{"version":3,"file":"AuthorizationHandler.js","sourceRoot":"","sources":["../../Library/AuthorizationHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,qDAAwD;AAExD,IAAM,2BAA2B,GAAG,qCAAqC,CAAC;AAG1E,SAAS,gBAAgB,CAAC,QAAmC;IAC3D,OAAO,IAAI,CAAC;AACd,CAAC;AAED;IAIE,8BAAY,UAAyC;QACnD,IAAI,MAAM,GAAa,CAAC,2BAA2B,CAAC,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,+BAA+B,CAAC,EAAE,UAAU,YAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;IAC7F,CAAC;IAED;;MAEE;IACW,qDAAsB,GAAnC,UAAoC,cAA0D;;;;;;wBACxF,cAAc,GAAG,eAAe,CAAC;wBACjC,WAAW,GAAG,SAAS,CAAC,qBAAqB,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;wBACvE,qBAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,gBAAgB,CAAC,EAAA;;wBAAvE,SAAuE,CAAC;wBACxE,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;;;;;KAClF;IACH,2BAAC;AAAD,CAAC,AAlBD,IAkBC;AAED,iBAAS,oBAAoB,CAAC","sourcesContent":["import http = require(\"http\");\r\nimport https = require(\"https\");\r\nimport azureCoreAuth = require(\"@azure/core-auth\");\r\nimport azureCore = require(\"@azure/core-rest-pipeline\");\r\n\r\nconst applicationInsightsResource = \"https://monitor.azure.com//.default\";\r\n\r\n\r\nfunction emptySendRequest(_request: azureCore.PipelineRequest): Promise<azureCore.PipelineResponse> {\r\n  return null;\r\n}\r\n\r\nclass AuthorizationHandler {\r\n\r\n  private _azureTokenPolicy: azureCore.PipelinePolicy;\r\n\r\n  constructor(credential: azureCoreAuth.TokenCredential) {\r\n    let scopes: string[] = [applicationInsightsResource];\r\n    this._azureTokenPolicy = azureCore.bearerTokenAuthenticationPolicy({ credential, scopes });\r\n  }\r\n\r\n  /**\r\n  * Applies the Bearer token to the request through the Authorization header.\r\n  */\r\n  public async addAuthorizationHeader(requestOptions: http.RequestOptions | https.RequestOptions): Promise<void> {\r\n    let authHeaderName = \"authorization\";\r\n    let webResource = azureCore.createPipelineRequest({ url: \"https://\" });\r\n    await this._azureTokenPolicy.sendRequest(webResource, emptySendRequest);\r\n    requestOptions.headers[authHeaderName] = webResource.headers.get(authHeaderName);\r\n  }\r\n}\r\n\r\nexport = AuthorizationHandler;\r\n"]}