{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import { useEffect, useReducer } from 'react';\nimport type { ReducerWithoutAction } from 'react';\nimport type { StoreApi } from 'zustand';\n\nexport function useZustand<State, Slice>(\n  store: StoreApi<State>,\n  selector: (state: State) => Slice,\n  areEqual: (a: Slice, b: Slice) => boolean = Object.is,\n) {\n  const getSlice = () => selector(store.getState());\n  const [[sliceFromReducer, storeFromReducer], rerender] = useReducer<\n    ReducerWithoutAction<readonly [Slice, StoreApi<State>]>,\n    undefined\n  >(\n    (prev) => {\n      const nextSlice = getSlice();\n      if (areEqual(prev[0], nextSlice) && prev[1] === store) {\n        return prev;\n      }\n      return [nextSlice, store];\n    },\n    undefined,\n    () => [getSlice(), store],\n  );\n  useEffect(() => {\n    const unsubscribe = store.subscribe(rerender);\n    rerender();\n    return unsubscribe;\n  }, [store]);\n  let slice = sliceFromReducer;\n  if (storeFromReducer !== store) {\n    rerender();\n    slice = getSlice();\n  }\n  return slice;\n}\n"],"names":["useZustand","store","selector","areEqual","Object","is","getState","sliceFromReducer","storeFromReducer","rerender","useReducer","prev","nextSlice","getSlice","undefined","useEffect","unsubscribe","subscribe","slice"],"mappings":"kDAIgBA,SAAAA,EACdC,EACAC,EACAC,EAA4CC,OAAOC,IAEnD,QAAiB,IAAMH,EAASD,EAAMK,cAC9BC,EAAkBC,GAAmBC,GAAYC,EAItDC,IACC,MAAeC,EAAGC,IAClB,OAAIV,EAASQ,EAAK,GAAIC,IAAcD,EAAK,KAAOV,EAE/CU,EACM,CAACC,EAAWX,EAAK,OAE1Ba,EACA,IAAM,CAACD,IAAYZ,IAErBc,EAAU,KACR,MAAMC,EAAcf,EAAMgB,UAAUR,GAEpC,OADAA,IAEFO,GAAG,CAACf,IACJ,IAASiB,EAAGX,EAKZ,OAJIC,IAAqBP,IACvBQ,IACAS,EAAQL,KAGZK,CAAA"}