{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { useEffect, useReducer } from 'react';\nimport type { ReducerWithoutAction } from 'react';\nimport type { StoreApi } from 'zustand';\n\nexport function useZustand<State, Slice>(\n  store: StoreApi<State>,\n  selector: (state: State) => Slice,\n  areEqual: (a: Slice, b: Slice) => boolean = Object.is,\n) {\n  const getSlice = () => selector(store.getState());\n  const [[sliceFromReducer, storeFromReducer], rerender] = useReducer<\n    ReducerWithoutAction<readonly [Slice, StoreApi<State>]>,\n    undefined\n  >(\n    (prev) => {\n      const nextSlice = getSlice();\n      if (areEqual(prev[0], nextSlice) && prev[1] === store) {\n        return prev;\n      }\n      return [nextSlice, store];\n    },\n    undefined,\n    () => [getSlice(), store],\n  );\n  useEffect(() => {\n    const unsubscribe = store.subscribe(rerender);\n    rerender();\n    return unsubscribe;\n  }, [store]);\n  let slice = sliceFromReducer;\n  if (storeFromReducer !== store) {\n    rerender();\n    slice = getSlice();\n  }\n  return slice;\n}\n"],"names":["useZustand","store","selector","areEqual","Object","is","getSlice","getState","useReducer","prev","nextSlice","undefined","sliceFromReducer","storeFromReducer","rerender","_useReducer","useEffect","unsubscribe","subscribe","slice"],"mappings":"oRAIgBA,SACdC,EACAC,EACAC,QAAAA,IAAAA,IAAAA,EAA4CC,OAAOC,IAEnD,IAAMC,EAAW,WAAMJ,OAAAA,EAASD,EAAMM,WAAW,EACQC,EAAAA,EAAUA,WAIjE,SAACC,GACC,IAAMC,EAAYJ,IAClB,OAAIH,EAASM,EAAK,GAAIC,IAAcD,EAAK,KAAOR,EAE/CQ,EACM,CAACC,EAAWT,EACrB,OACAU,EACA,WAAA,MAAM,CAACL,IAAYL,EAAM,GAZnBW,EAAAA,EAAAA,GAAAA,EAAkBC,EAAAA,GAAAA,OAAmBC,EAAQC,EAAA,GAcrDC,EAAAA,UAAU,WACR,IAAiBC,EAAGhB,EAAMiB,UAAUJ,GAEpC,OADAA,IACOG,CACT,EAAG,CAAChB,IACJ,IAASkB,EAAGP,EAKZ,OAJIC,IAAqBZ,IACvBa,IACAK,EAAQb,KAGZa,CAAA"}